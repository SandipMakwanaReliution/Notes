    # def action_create_ro(self):
    #     self.ensure_one()
    #     repair_order = self.env['repair.order'].create({
    #         'partner_id': self.partner_id.id,
    #         'sale_order_id' : self.id,
    #         'picking_type_id' : self.warehouse_id.repair_type_id.id,
    #     })
    #     return {
    #         'type': 'ir.actions.act_window',
    #         'res_model': 'repair.order',
    #         'view_mode': 'form',
    #         'res_id': repair_order.id,
    #         'target': 'current',
    #     }


                    <button string="Generate RO"
                        type="object" name="action_create_ro"
                        invisible="state != 'sale'"
                        class="btn-primary"/>



==========
Korzo
==========
Curtains
-> Routes : Manufacturing, MTO 
-> Component : fabric, track, optional motor

Roller
-  involve selecting fabric and entering width and height.

Fabrics
-> Routes : Buy, MTO 

Track
-> Routes : Manufacturing, Buy, MTO 

Stitching & Installation Service 
-




=============
Repair Module
=============

Enable "create repair order from return" in Operation type.
-> able to directly create repair order from a return.

If "add" product in repair order, automatice add this product on sale order line after save the repair order.
-> In repair order if not enable "Under Warranty". -> add its price.
-> In repair order if enable "Under Warranty".     -> not add its price.

Add ->      Stock           To  VL/Production
Remove ->   VL/Production   To  VL/Scrap
Recycle ->  VL/Production   To  Stock

Flow 1: Direct create a repair order without return a product.
- Enable "create repair" checkbox  for service product to create directly Repair Order when sale order is confirm.

Flow 2: After return order create a repair order.



<!--            <xpath expr="//div[@name='button_box']" position="inside">-->
<!--                <button name="action_view_repair_orders"-->
<!--                        type="object"-->
<!--                        class="oe_stat_button"-->
<!--                        icon="fa-wrench">-->
<!--                    <field name="repair_order_count" widget="statinfo" string="Repairs"/>-->
<!--                </button>-->
<!--            </xpath>-->

    repair_order_count = fields.Integer(string="Repair Orders", compute="_compute_ro_count")

    # def action_view_repair_orders(self) :
    #     self.ensure_one()
    #     return {
    #         'type' : 'ir.actions.act_window',
    #         'name' : 'Repair Orders',
    #         'view_mode' : 'tree,form',
    #         'res_model' : 'repair.order',
    #         'domain' : [('sale_order_id', '=', self.id)],
    #         'context' : {'default_sale_id' : self.id, 'default_partner_id' : self.partner_id.id},
    #     }
    #
    # def _compute_ro_count(self) :
    #     for order in self :
    #         order.repair_order_count = self.env['repair.order'].search_count([('sale_order_id', '=', order.id)])
    #





    # -*- coding: utf-8 -*-

from odoo import models, fields, api

class RepairOrder(models.Model):
    _inherit = 'repair.order'

    sale_id = fields.Many2one('sale.order', string="Sale Order")

